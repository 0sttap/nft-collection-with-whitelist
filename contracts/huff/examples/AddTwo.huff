#define constant ADD_TWO_SIG = 0x0f52d66e

#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    [ADD_TWO_SIG] eq addTwo jumpi

    make_revert jump

    addTwo:
        ADD_TWO()

    make_revert:
        0x01 dup1 revert                            // revert (1, 1)
        
        stop
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload 0xF8 shr     // [number1] // load first byte onto the stack - number 1 and shift to right
    0x05 calldataload 0xF8 shr     // [number2] // load second byte onto the stack - number 2 and shift to right
    add                   // [number1+number2] // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place [number1 + number2] in memory
    0x20 0x00 return      // return the result
}

// 62860
